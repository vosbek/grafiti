# Podman Compose with All Verified Fixes
# This configuration is adapted from docker-compose.verified.yml for podman compatibility

version: '3.8'

services:
  # Neo4j Database with podman-compatible configuration
  neo4j:
    image: neo4j:5.15
    container_name: neo4j-codeanalysis
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/codeanalysis123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=512M
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p codeanalysis123 'RETURN 1;' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - codeanalysis-network

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: redis-codeanalysis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - codeanalysis-network

  # Backend API with podman-compatible configuration
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
      args:
        - ENVIRONMENT=production
        - ENABLE_GPU=false
    container_name: codeanalysis-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=codeanalysis123
      - REDIS_URL=redis://redis:6379
      
      # Application Settings
      - DEBUG=false
      - LOG_LEVEL=INFO
      - WORKERS=4
      - ENVIRONMENT=production
      
      # Repository Configuration
      - REPOSITORY_BASE_PATH=/app/repositories
      - MAX_CONCURRENT_REPOS=3
      - CLEANUP_OLD_REPOS=true
      
      # Performance Settings (verified for enterprise scale)
      - CODEBERT_BATCH_SIZE=16
      - MAX_REPO_SIZE_GB=5
      - TORCH_NUM_THREADS=4
      
      # AI Configuration (set your keys here or use AWS Bedrock)
      # - OPENAI_API_KEY=your-key-here
      # - ANTHROPIC_API_KEY=your-key-here
      # For AWS Bedrock:
      # - OPENAI_API_BASE=http://bedrock-proxy:8001/v1
      # - OPENAI_API_KEY=bedrock-proxy
      
    volumes:
      - repository_data:/app/repositories
      - analysis_data:/app/analysis-results
      - backend_logs:/app/logs
      - embeddings_cache:/app/embeddings
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # Longer startup time for ML models
    networks:
      - codeanalysis-network
    # Podman-specific: User mapping for rootless mode
    user: "1000:1000"

  # Frontend with podman-compatible configuration
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      target: production
    container_name: codeanalysis-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_DEBUG=false
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - codeanalysis-network

  # AWS Bedrock Proxy (optional - only if using Bedrock)
  bedrock-proxy:
    image: ghcr.io/berriai/litellm:main-latest
    container_name: bedrock-proxy
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - LITELLM_MASTER_KEY=sk-1234
      - DATABASE_URL=postgresql://
    command: 
      - "--config"
      - "/app/litellm_config.yaml"
      - "--port"
      - "8001"
    volumes:
      - ./config/litellm_config.yaml:/app/litellm_config.yaml:ro
    profiles:
      - bedrock  # Only start when using bedrock profile
    networks:
      - codeanalysis-network

networks:
  codeanalysis-network:
    # Removed Docker-specific driver specification for podman compatibility
    name: codeanalysis-network

volumes:
  # Database volumes - simplified for podman compatibility
  neo4j_data:
    name: codeanalysis_neo4j_data
  neo4j_logs:
    name: codeanalysis_neo4j_logs
  neo4j_import:
    name: codeanalysis_neo4j_import
  neo4j_plugins:
    name: codeanalysis_neo4j_plugins
  redis_data:
    name: codeanalysis_redis_data
    
  # Application volumes
  repository_data:
    name: codeanalysis_repositories
  analysis_data:
    name: codeanalysis_analysis_results
  backend_logs:
    name: codeanalysis_backend_logs
  embeddings_cache:
    name: codeanalysis_embeddings_cache