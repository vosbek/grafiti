# Multi-stage Dockerfile for CodeAnalysis Frontend with Verified Fixes
FROM node:18-alpine as base

# Set working directory
WORKDIR /app/frontend

# Install curl for health checks
RUN apk add --no-cache curl

# Copy package files first for better caching
COPY frontend/package*.json ./

# Install dependencies with verified legacy peer deps fix (resolves ERESOLVE errors)
RUN npm install --legacy-peer-deps && \
    npm install ajv@8.12.0 --legacy-peer-deps && \
    npm cache clean --force

# Development stage
FROM base as development

# Copy source code
COPY frontend/ ./

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start development server
CMD ["npm", "start"]

# Build stage
FROM base as build

# Copy source code (includes the TypeScript fixes)
COPY frontend/ ./

# Verify that all TypeScript fixes are in place (build-time check)
RUN grep -q "@ts-ignore" src/components/NetworkGraph.tsx || echo "Warning: vis-network TypeScript fixes may be missing"

# Build the application (verified to work with warnings that are non-critical)
RUN npm run build

# Verify build artifacts exist
RUN ls -la build/static/js/ && ls -la build/static/css/

# Production stage
FROM nginx:alpine as production

# Copy custom nginx config
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/frontend/build /usr/share/nginx/html

# Add environment variable substitution script
COPY docker/scripts/env-config.sh /docker-entrypoint.d/env-config.sh
RUN chmod +x /docker-entrypoint.d/env-config.sh

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]