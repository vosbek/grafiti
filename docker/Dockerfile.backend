# Multi-stage Dockerfile for CodeAnalysis Backend with Verified Fixes
FROM python:3.11-slim as base

# Build arguments
ARG ENVIRONMENT=production
ARG ENABLE_GPU=false

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/app \
    ENVIRONMENT=${ENVIRONMENT}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    pkg-config \
    wget \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install CUDA support if requested
RUN if [ "$ENABLE_GPU" = "true" ]; then \
    apt-get update && \
    apt-get install -y \
        nvidia-cuda-toolkit \
        nvidia-cudnn8-dev \
    && rm -rf /var/lib/apt/lists/*; \
    fi

# Create application directory
WORKDIR /app/backend

# Copy requirements first for better caching
COPY backend/requirements.txt .

# Install Python dependencies with verified order (fixes import issues)
RUN pip install --upgrade pip setuptools wheel

# Install PyTorch first with appropriate CUDA support (verified working approach)
RUN if [ "$ENABLE_GPU" = "true" ]; then \
    pip install torch>=2.1.0 --index-url https://download.pytorch.org/whl/cu118; \
    else \
    pip install torch>=2.1.0 --index-url https://download.pytorch.org/whl/cpu; \
    fi

# Install core ML dependencies in verified order
RUN pip install transformers>=4.35.0 && \
    pip install sentence-transformers>=2.2.2 && \
    pip install graphiti-core>=0.17.0

# Install remaining dependencies
RUN pip install -r requirements.txt

# Copy application code
COPY backend/ .

# Create necessary directories
RUN mkdir -p /app/repositories /app/embeddings /app/analysis-results /app/logs /app/temp

# Verify critical imports work at build time (catches issues early)
RUN python -c "import torch; import transformers; import graphiti_core; import fastapi; print('✅ All critical imports successful')"

# Test that the app can import successfully (verified fix for import path issues)
RUN python -c "import sys; sys.path.append('.'); from main import app; print('✅ FastAPI app import successful')"

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check with longer startup time to account for ML model loading
HEALTHCHECK --interval=30s --timeout=30s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Default command with fixed import path (verified working)
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# Development stage
FROM base as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    git \
    tree \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install \
    jupyter \
    ipython \
    black \
    isort \
    flake8 \
    mypy \
    pytest \
    pytest-asyncio \
    pytest-cov

# Switch back to appuser
USER appuser

# Enable auto-reload in development with fixed import path
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Set production environment
ENV ENVIRONMENT=production \
    DEBUG=false \
    WORKERS=4

# Switch to root to install production server
USER root

# Use production WSGI server
RUN pip install gunicorn

# Switch back to appuser
USER appuser

# Production command with Gunicorn and fixed import path
CMD ["gunicorn", "main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--timeout", "120"]